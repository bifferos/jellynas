Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2025-03-02T12:52:45+00:00

====== 03 Suspend ======
Created Sunday 02 March 2025

===== Autosuspend =====

{{./pasted_image003.png}}

https://github.com/languitar/autosuspend
https://autosuspend.readthedocs.io/en/v7.2.0/

$ systemctl status autosuspend

root@stor-desktop:/home/stor# systemctl status autosuspend
● autosuspend.service - A daemon to suspend your server in case of inactivity
	 Loaded: loaded (/usr/lib/systemd/system/autosuspend.service; enabled; preset: enabled)
	 Active: active (running) since Sat 2025-03-01 20:05:04 GMT; 11min ago
	   Docs: https://autosuspend.readthedocs.io/en/latest/systemd_integration.html
   Main PID: 1587 (autosuspend)
	  Tasks: 1 (limit: 18994)
	 Memory: 37.3M (peak: 37.6M)
		CPU: 365ms
	 CGroup: /system.slice/autosuspend.service
			 └─1587 /usr/bin/python3 /usr/bin/autosuspend -l /etc/autosuspend-logging.conf daemon

Mar 01 20:15:55 stor-desktop autosuspend[1587]: 2025-03-01 20:15:55,048 - autosuspend.Processor - INFO - System is active. Resetting state
Mar 01 20:16:00 stor-desktop autosuspend[1587]: 2025-03-01 20:16:00,048 - autosuspend.Processor - INFO - Starting new check iteration
Mar 01 20:16:00 stor-desktop autosuspend[1587]: 2025-03-01 20:16:00,049 - autosuspend.Processor - INFO - Check LocalUsers matched. Reason: User stor is logged in on terminal >
Mar 01 20:16:00 stor-desktop autosuspend[1587]: 2025-03-01 20:16:00,049 - autosuspend.Processor - INFO - System is active. Resetting state
Mar 01 20:16:05 stor-desktop autosuspend[1587]: 2025-03-01 20:16:05,049 - autosuspend.Processor - INFO - Starting new check iteration
Mar 01 20:16:05 stor-desktop autosuspend[1587]: 2025-03-01 20:16:05,050 - autosuspend.Processor - INFO - Check LocalUsers matched. Reason: User stor is logged in on terminal >
Mar 01 20:16:05 stor-desktop autosuspend[1587]: 2025-03-01 20:16:05,050 - autosuspend.Processor - INFO - System is active. Resetting state
Mar 01 20:16:10 stor-desktop autosuspend[1587]: 2025-03-01 20:16:10,051 - autosuspend.Processor - INFO - Starting new check iteration
Mar 01 20:16:10 stor-desktop autosuspend[1587]: 2025-03-01 20:16:10,051 - autosuspend.Processor - INFO - Check LocalUsers matched. Reason: User stor is logged in on terminal >
Mar 01 20:16:10 stor-desktop autosuspend[1587]: 2025-03-01 20:16:10,051 - autosuspend.Processor - INFO - System is active. Resetting state

Configuration file is at:  **/etc/autosuspend.conf**

$ systemctl restart autosuspend

**To restart?**  Hit a key on the keyboard

How to suspend?   systemctl suspend

Important autosuspend lines:
[general]
interval = 30    <---- check interval (how often the other configured checks execute)
idle_time = 900    <---- How long *all* checks must return idle consecutively before suspending
suspend_cmd = /usr/bin/systemctl suspend


See these sections in the config file:
[check.RemoteUsers]
enabled = true

[check.LocalUsers]
enabled = true

Safe to leave them.


==== For Jellyfin ====

Sleep when the TV is off is one possibility:

[check.Ping]
enabled = true
hosts = <my tv address>

Issue:  Amazon/Netflix/Youtube leaves the NAS on.

Sleep when no SMB traffic would work for Kodi:

# This check is disabled.
[check.Smb]
enabled = false

Issue:  Jellyfin doesn't mount shares itself, so it's permanently connected.


{{./pasted_image019.png}}
[check.ExternalCommand]
enabled = true
command = [[../JellyNAS/myscript.sh]]


We can check sessions in Jellyfin using the API


In Jellyfin, under Dashboard:

{{./pasted_image020.png}}

{{./pasted_image021.png}}

e.g. 

{{./pasted_image022.png}}


a5c8f9564c10458bb1f1ada1ad2958b6


http://172.16.16.14:8096/web/#/dashboard/keys

**Curl**
''curl -s -X GET "''[[http://172.16.16.14:8096/Sessions|''http://172.16.16.14:8096/Sessions'']]''" -H "X-Emby-Token: a5c8f9564c10458bb1f1ada1ad2958b6"''

**Python:  a naive solution**
''import requests''
''resp = requests.get("''[[http://172.16.16.14:8096/Sessions|''http://172.16.16.14:8096/Sessions'']]''", headers={"X-Emby-Token": "a5c8f9564c10458bb1f1ada1ad2958b6"})''
''user_list = resp.json()''
''if len(user_list):''
	''sys.exit(0)''
''else:''
	''sys.exit(1)''


**''python3''**
''>>> import requests''
''>>> from pprint import pprint''
''>>> resp = requests.get("''[[http://172.16.16.14:8096/Sessions|''http://172.16.16.14:8096/Sessions'']]''", headers={"X-Emby-Token": "a5c8f9564c10458bb1f1ada1ad2958b6"})''
''>>> pprint(resp.json())''
''[{'AdditionalUsers': [],''
  '''ApplicationVersion': '10.10.6',''
''...''
  '''IsActive': True,''
  "__LastActivityDate__": "2025-03-02T22:09:50.4995026Z",''
''...''
  '''RemoteEndPoint': '172.16.16.27',''
''...''
  '''UserId': '7eed0d239298485dad167d9df41d3a96',''
  '''UserName': 'guest'}]''



Autosuspend wants:
* Poll every X seconds
* From series of poll results, figure out idle time


[[LastActivityDate]] provides:
* Idle time immediately (now - activitydate)
* No way to tell autosuspend that 'time's up'

So we have to convert the lastActivityDate into a 'check' script by comparing the previous [[LastActivityDate]] with the current one, so we need to keep track.

**[[/usr/local/bin/jellycheck.py]]**

	''#!/usr/bin/env python3''
	
	''import sys''
	''import requests''
	''from pathlib import Path''
	''from datetime import datetime, timezone, timedelta''
	
	
	''PREVIOUS_DATE_FILE = Path("/tmp/jellycheck.txt")''

	
	''def init_previous_date():''
		''if not PREVIOUS_DATE_FILE.exists():''
			''date_now = datetime.now(tz=timezone.utc)''
			''very_old = date_now - timedelta(days=360)''
	
			''with PREVIOUS_DATE_FILE.open("w") as fp:''
				''fp.write(very_old.isoformat())''
	
	
	''def read_previous_date():''
		''"""Read date stored from the previous execution"""''
		''with PREVIOUS_DATE_FILE.open("r") as fp:''
			''return datetime.fromisoformat(fp.read().strip())''
	
	
	''def write_date(lastactive):''
		''"""Write the newly acquired date"""''
		''with PREVIOUS_DATE_FILE.open("w") as fp:''
			''fp.write(lastactive.isoformat())''
	
	
	''def latest_activity(session_list):''
		''all_dates = []''
		''for session in session_list:''
			''iso_str = session["LastActivityDate"]''
			''iso_date = datetime.fromisoformat(iso_str)''
			''all_dates.append(iso_date)''
	        
		''all_dates.sort()''
		''return all_dates[-1]''    
	
	
	''def main():''
		''init_previous_date()''
	
		''old_date = read_previous_date()''
	
		''try:''
			''resp = requests.get("http://172.16.16.14:8096/Sessions", headers={"X-Emby-Token": "a5c8f9564c10458bb1f1ada1ad2958b6"})''
			''resp.raise_for_status()''
			''session_list = resp.json()''
		''except Exception as e:''
			''printf(f"Error making check on sessions {e}")''
			''sys.exit(0)    # We want to indicate active on any error, because the error is probably suspend in progress, and safer not to sleep for diagnostics''
	    
		''if len(session_list) == 0:''
			''sys.exit("No sessions, inactive")   # no sessions, inactive''
	
		''new_date = latest_activity(session_list)''
		''if new_date == old_date:''
			''sys.exit("Session, but no new activity")   # session, but no activity since last poll: inactive''
	
		''write_date(new_date)''
	
	
	''if __name__ == "__main__":''
		''main()''
	

And put it in a section in the conf file:
**/etc/autosuspend.conf**
''[check.ExternalCommand]''
''enabled = true''
''command = /usr/local/bin/jellycheck.py''


(optional) override the autosuspend.conf command with my own for more/different logging.
**/usr/loca/bin/suspend.sh**
''#!/bin/sh''

''logger nas_shutdown''
''/usr/bin/systemctl suspend''




Troubleshooting if systemd refuses to suspend:

{{./pasted_image.png}}



